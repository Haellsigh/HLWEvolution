package MonsterData

import LinkedList

import Money
import MathsRound
import Constants

tuple ButtonPosition(int x, int y)

class MonsterData
  Money cost
  Money income
  int damage
  int armor
  int hp
  string hotkey
  ButtonPosition buttonPosition

  construct(Money cost_, Money income_,
                  int damage_, int armor_, int hp_,
                  string hotkey_, ButtonPosition buttonPosition_)
    cost = cost_
    income = income_
    damage = damage_
    armor = armor_
    hp = hp_
    hotkey = hotkey_
    buttonPosition = buttonPosition_

//public MonsterData array[monsterCount] monsterData
public var monsterData = compiletime(new LinkedList<MonsterData>)

function price(int id, int lastPrice) returns int
  return (lastPrice * priceC1 + id * priceC2).toInt()

function income(integer price) returns int
  return (Pow(price.toReal(), incomeC1) / incomeC2).toInt()

function damage(int id, int lastDamage) returns int
  return (lastDamage * damageC1 + id * damageC2).toInt()

function hp(int id) returns int
  return (hpC1 * Pow(hpC2, id.toReal())).toInt()

function armor(int id) returns int
  return (armorC1 * Pow(armorC2, id.toReal())).toInt()

function hotkey(string lastHotkey) returns string
  let hotkeys = "QWERASDFZX"
  var i = hotkeys.indexOf(lastHotkey) + 1
  if i >= hotkeys.length() or i == -1
    i = 0
  return hotkeys.charAt(i)

function buttonpos(ButtonPosition lastPosition) returns ButtonPosition
  if lastPosition.x < 3 and lastPosition.y < 2
    return ButtonPosition(lastPosition.x + 1, lastPosition.y)
  else if lastPosition.y < 2
    return ButtonPosition(0, lastPosition.y + 1)
  else if lastPosition.x < 1
    return ButtonPosition(lastPosition.x + 1, lastPosition.y)
  else
    return ButtonPosition(0, 0)

@compiletime function initMonsterData()
  var lastPrice = 5
  var lastDamage = 20
  var lastButtonPosition = ButtonPosition(0, 0)
  var lastHotkey = "Q"
  let multiple = 5
  
  // Manualyl input the first monster
  monsterData.push(new MonsterData(new Money(lastPrice, 0), new Money(1, 0), lastDamage, 100, 5, lastHotkey, ButtonPosition(0, 0)))

  for id = 1 to monsterCount - 1
    let newPriceAmount = roundNearest(price(id, lastPrice).toReal(),
                      multiple)
    let newIncomeAmount = income(newPriceAmount)
    
    let newPrice = new Money(newPriceAmount)
    let newIncome = new Money(newIncomeAmount)

    let newDamage = damage(id, lastDamage)
    let newHp = hp(id)
    let newArmor = armor(id)

    let newHotkey = hotkey(lastHotkey)
    let newButtonPosition = buttonpos(lastButtonPosition)

    monsterData.push(new MonsterData(newPrice, newIncome,
                                  newDamage, newHp, newArmor, 
                                  newHotkey, newButtonPosition))

    lastPrice = newPriceAmount
    lastDamage = newDamage
    lastHotkey = newHotkey
    lastButtonPosition = newButtonPosition