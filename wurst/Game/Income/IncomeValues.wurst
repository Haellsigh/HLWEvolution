package IncomeValues

import Players
import HashMap
import ClosureEvents

import Initialization

// Define an income type
public class Income
    integer gold
    integer lumber

    construct()
        this.gold = 0
        this.lumber = 0

    construct(integer gold)
        this.gold = gold
        this.lumber = 0

    construct(integer gold, integer lumber)
        this.gold = gold
        this.lumber = lumber
    
    function reset()
        this.gold = 0
        this.lumber = 0
    
    function op_plus(Income i) returns Income
        return new Income(this.gold + i.gold, this.lumber + i.lumber)
    
    function op_minus(Income i) returns Income
        return new Income(this.gold - i.gold, this.lumber - i.lumber)

// Stores players income
public constant playerIncome = new IterableMap<player, Income>
public constant Income array[2] teamIncome = [new Income(), new Income()]

@compiletime function initIncomeValuesEvents()
    // Keep the list up to date
    EventListener.add(EVENT_PLAYER_LEAVE) ->
        playerIncome.remove(GetTriggerPlayer())

@lateinit function initIncomeValues()
    // Default income to 20 gold
    for player p in ALL_PLAYERS
        playerIncome.put(p, new Income(20))